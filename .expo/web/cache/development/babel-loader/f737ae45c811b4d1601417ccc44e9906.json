{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/steven/STA/Volunteer-app/node_modules/react-native-fontawesome/Icon.js\";\nvar _excluded = [\"style\", \"color\", \"icon\", \"pro\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SolidIcons, RegularIcons, BrandIcons, parseIconFromClassName } from \"./FontAwesomeIcons\";\n\nvar Icon = function (_Component) {\n  _inherits(Icon, _Component);\n\n  var _super = _createSuper(Icon);\n\n  function Icon() {\n    _classCallCheck(this, Icon);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Icon, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      this._root.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          color = _this$props.color,\n          icon = _this$props.icon,\n          pro = _this$props.pro,\n          props = _objectWithoutProperties(_this$props, _excluded);\n\n      var _split = (icon || '').split('|'),\n          _split2 = _slicedToArray(_split, 2),\n          code = _split2[0],\n          type = _split2[1];\n\n      var IconType = type === 'brand' ? BrandIcons : type === 'regular' ? RegularIcons : SolidIcons;\n      var font = {\n        fontFamily: IconType._fontFamily || ''\n      };\n\n      if (pro) {\n        font.fontFamily = font.fontFamily.replace('Free', 'Pro');\n      }\n\n      return React.createElement(Text, _extends({}, props, {\n        style: [styles.icon, {\n          color: color\n        }, style, font],\n        ref: function ref(component) {\n          return _this._root = component;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 7\n        }\n      }), code);\n    }\n  }]);\n\n  return Icon;\n}(Component);\n\nvar styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  }\n});\nexport { SolidIcons, RegularIcons, BrandIcons, parseIconFromClassName };\nexport default Icon;","map":{"version":3,"sources":["/Users/steven/STA/Volunteer-app/node_modules/react-native-fontawesome/Icon.js"],"names":["React","Component","SolidIcons","RegularIcons","BrandIcons","parseIconFromClassName","Icon","nativeProps","_root","setNativeProps","props","style","color","icon","pro","split","code","type","IconType","font","fontFamily","_fontFamily","replace","styles","component","StyleSheet","create","backgroundColor"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAGA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,UAAnC,EAA+CC,sBAA/C;;IAEMC,I;;;;;;;;;;;;;WACJ,wBAAeC,WAAf,EAA4B;AAC1B,WAAKC,KAAL,CAAWC,cAAX,CAA0BF,WAA1B;AACD;;;WAED,kBAAS;AAAA;;AACP,wBAA8C,KAAKG,KAAnD;AAAA,UAAQC,KAAR,eAAQA,KAAR;AAAA,UAAeC,KAAf,eAAeA,KAAf;AAAA,UAAsBC,IAAtB,eAAsBA,IAAtB;AAAA,UAA4BC,GAA5B,eAA4BA,GAA5B;AAAA,UAAoCJ,KAApC;;AACA,mBAAqB,CAACG,IAAI,IAAI,EAAT,EAAaE,KAAb,CAAmB,GAAnB,CAArB;AAAA;AAAA,UAAOC,IAAP;AAAA,UAAaC,IAAb;;AAEA,UAAMC,QAAQ,GAAGD,IAAI,KAAK,OAAT,GAAmBb,UAAnB,GACAa,IAAI,KAAK,SAAT,GAAqBd,YAArB,GACED,UAFnB;AAIA,UAAMiB,IAAI,GAAG;AAAEC,QAAAA,UAAU,EAAEF,QAAQ,CAACG,WAAT,IAAwB;AAAtC,OAAb;;AAEA,UAAIP,GAAJ,EAAS;AACPK,QAAAA,IAAI,CAACC,UAAL,GAAkBD,IAAI,CAACC,UAAL,CAAgBE,OAAhB,CAAwB,MAAxB,EAAgC,KAAhC,CAAlB;AACD;;AAED,aACE,oBAAC,IAAD,eACMZ,KADN;AAEE,QAAA,KAAK,EAAE,CAACa,MAAM,CAACV,IAAR,EAAc;AAAED,UAAAA,KAAK,EAALA;AAAF,SAAd,EAAyBD,KAAzB,EAAgCQ,IAAhC,CAFT;AAGE,QAAA,GAAG,EAAE,aAAAK,SAAS;AAAA,iBAAI,KAAI,CAAChB,KAAL,GAAagB,SAAjB;AAAA,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAKGR,IALH,CADF;AASD;;;;EA5BgBf,S;;AA+BnB,IAAMsB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,IAAI,EAAE;AACJc,IAAAA,eAAe,EAAE;AADb;AADyB,CAAlB,CAAf;AAMA,SAASzB,UAAT,EAAqBC,YAArB,EAAmCC,UAAnC,EAA+CC,sBAA/C;AACA,eAAeC,IAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Text, StyleSheet } from 'react-native';\r\n\r\nimport { SolidIcons, RegularIcons, BrandIcons, parseIconFromClassName } from './FontAwesomeIcons';\r\n\r\nclass Icon extends Component {\r\n  setNativeProps(nativeProps) {\r\n    this._root.setNativeProps(nativeProps);\r\n  }\r\n\r\n  render() {\r\n    const { style, color, icon, pro, ...props } = this.props;\r\n    const [code, type] = (icon || '').split('|')\r\n\r\n    const IconType = type === 'brand' ? BrandIcons :\r\n                     type === 'regular' ? RegularIcons\r\n                     : SolidIcons\r\n\r\n    const font = { fontFamily: IconType._fontFamily || '' }\r\n\r\n    if (pro) {\r\n      font.fontFamily = font.fontFamily.replace('Free', 'Pro')\r\n    }\r\n\r\n    return (\r\n      <Text\r\n        {...props}\r\n        style={[styles.icon, { color }, style, font]}\r\n        ref={component => this._root = component}\r\n      >\r\n        {code}\r\n      </Text>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  icon: {\r\n    backgroundColor: 'transparent'\r\n  },\r\n});\r\n\r\nexport { SolidIcons, RegularIcons, BrandIcons, parseIconFromClassName };\r\nexport default Icon;\r\n"]},"metadata":{},"sourceType":"module"}